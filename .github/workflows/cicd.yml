# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'




      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # application properties
      - name: application.properties
        run: |
          cd src/main
          if [ -d "resources" ]; then
            rm -rf resources
          fi
          mkdir resources
          cd resources
          touch application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" >> application.properties
        shell: bash




      - name: Build with Gradle Wrapper
        #        run: ./gradlew build
        run: ./gradlew build --warning-mode all


      # JAR 파일을 Docker 빌드 컨텍스트로 복사
      - name: Copy JAR to root
        run: cp build/libs/streaming-service-settlement-0.0.1-SNAPSHOT.jar .

      - name: Show Gradle Build Result
        run: |
          echo "Gradle build completed!"
          ls -R ./build/libs

      - name: Login to Docker Hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Build docker image
        run : docker build -t ${{ secrets.DOCKER_REPO }} .

      - name: Publish image to docker hub
        run : docker push ${{ secrets.DOCKER_REPO }}:latest
    # ec2
    #  deploy:
    #    needs: build
    #    run -on:


    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

